
1) inverse (倒转)
负责控制关系，默认为false，关系的两端都能控制.
这样会造成一些问题，更新的时候会因为两端都控制关系，于是重复更新，
一般来说，要有一端设置为true(inverse=true表示关系交由另外一方去控制)

many-to-one中inverse总是设置为false，在源码中直接体现出来，因此该元素的
没有inverse属性.
/**
 * Custom.hbm.xml set元素中配置了inverse=true，
 * 则 custom.getItems().add(item1); 去维护和多的一方
 * 的关系是多余的、不起作用的，此时Item对象的保存
 * 可以成功，但是关联的关系(此时是item表的外键customId字段)
 * 的值却为空.
 * 此时必须由 多的一方去维护关系
 * 
 */

关系维护方式: 1) 外键方式  2) 中间表方式
inverse=false 由当前对象来维护关系
inverse=true 由对方对象来维护关系

many-to-many 中: inverse不能同时为true或false，同时为true导致中间表
没有任何一方去维护，同时为false，导致双方同时去维护中间表，将导致
中间表重复插入、更新、删除；因此 多对多中，双方的inverse必须不同，必须
进行设置.
说明: 关系只要有一方去维护即可，在多对多关系中，双方同时去维护就会导致
中间表记录重复出现等问题，而外键方式则是只要有不少于一方去维护关系，则
关系就会被建立建立，而不会为空.

inverse还有一个重要的特点是可以优化sql.

2) cascade (级联)
负责控制关联对象的级联操作，包括新增、删除、更新.
cascade 级联操作的作用是，在使用Session的增删改的api时，只在
cascade的源头上执行即可，和它关联的无需执行，代码将会减少若干行.














cache
cache是提高系统性能的最重要的手段，对数据起到一个蓄水池、缓冲的作用。
为了降低访问网络和数据库磁盘读写的开销，希望可以让数据库在本地内存中
保留一个镜像，下次访问时直接从内存中获取，

1. 一级缓存
Session实现了第一级缓存，属于事务级数据缓冲，一旦事务结束，这个cache也
随之失效，一个session的生命周期对应一个数据库事务活一个程序事务。
session-cache保证了一个Session中两次请求同一个，取得同一个实例，有时可以
避免不必要的数据冲突，还能提供另外一些重要的性能保证:
A.在对一个对象进行循环自我引用时，不至于产生堆栈溢出
B. 当数据库事务结束时，对于同一个数据库行，不会产生数据冲突，因为对于数据库
中的一行，最多只有一个对象来表示它.
session.evict() 从一级cache中移除对象.


2. 二级缓存
二级缓存是SessionFactory范围内的缓存，所有的Session共享同一个二级缓存，在二级
缓存中保存实例的散装形式的数据.

有4种内置的Hibernate数据并发冲突策略，代表数据库隔离级别，如下：
1：事务（Transaction）仅在受管理的环境中可用。它保证可重读的事务隔离级别，可以对读/写比例高，很少更新的数据采用该策略。
2：读写（read-write）使用时间戳机制维护读写提交事务隔离级别。可以对读/写比例高，很少更新的数据采用该策略。
3：非严格读写（notstrict-read-write）不保证Cache和数据库之间的数据库的一致性。使用此策略时，应该设置足够的缓存过期时间，否则可能从缓存中读出脏数据。当一些数据极少改变，并且当这些数据和数据库有一部份不量影响不大时，可以使用此策略。
4：只读（read-only）当确保数据永不改变时，可以使用此策略。

确定了Cache策略后，就要挑选一个高效的Cache提供器，它将作为插件被Hibernate调用。Hibernate允许使用下述几种缓存插件：
EhCache：可以在JVM中作为一个简单进程范围内的缓存，它可以把缓存的数据放入内存或磁盘，并支持Hibernate中可选用的查询缓存。
OpenSymphony OSCache：和EhCache相似，并且提供了丰富的缓存过期策略。
SwarmCache：可作为集群范围的缓存，但不支持查询缓存。
JBossCache：可作为集群范围的缓冲，但不支持查询缓存。













